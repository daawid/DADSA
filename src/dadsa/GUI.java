package dadsa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author dawid
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        createPopulateLocations(); // Creates and populates the existing Locations
    }

    // My variables
    public ArrayList<Location> locations = new ArrayList<>(); // Locations container
    boolean loaded = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenuItem2.setText("jMenuItem2");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DADSA assignment - collection manager");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Navigation");

        jButton1.setText("Add item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View current values");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("View all contents");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Add all test items");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Exit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("Output");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Dawid Kuder");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("14018789");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(47, 47, 47)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 433, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // View current values button 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea1.setText(null); // Clears the text area
        jTextArea1.append("All location values: \n");
        for (Location l : locations) {// Displays the contents of the location array
            jTextArea1.append("\n Location " + l.getName() + ": Â£" + Integer.toString(l.getValue()));
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    // View all contents button 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea1.setText(null); // Clears the text area
        viewItems(); // Views items using the viewItems
    }//GEN-LAST:event_jButton3ActionPerformed

    // Exit button 
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String title = "Exitting";
        String message = "Are you sure?";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION); // Displays an option pane to confirm exit
        if (reply == JOptionPane.YES_OPTION) { // Yes option exits, No option does nothing so GUI keeps running
            System.exit(0);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    // Add all test items button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextArea1.setText(null); // Clears the text area
        testData(); // Loads all test data in Test.csv into the system
        viewItems(); // Views items using the viewItems
    }//GEN-LAST:event_jButton4ActionPerformed

    // Add item button 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addItem(); // Calls the addItem method below
    }//GEN-LAST:event_jButton1ActionPerformed

    public void addItem() {
        jTextArea1.setText(null); // Clears the text area
        /**
         * JOptionPanes first assign the location for the item to be added to
         * and then parses item specifics i.e. reference and name*
         */
        String location = JOptionPane.showInputDialog(null, "Which location would you like to add an item to?");
        String[] line = JOptionPane.showInputDialog(null, "What item would you like to add (Reference,Name,Value)?").split(",");
        try {
            Item i = new Item(Integer.parseInt(line[0]), line[1], Long.parseLong(line[2]));

            long space = 0; // Sets free space in the location to 0 before being re-assigned

            for (Location l : locations) {
                space += (l.getMaxValue() - l.getValue()); // Assigns free space 
                if (Long.parseLong(line[2]) > l.getMaxValue()) { // If the value is higher than maxValue then user is alerted, item not added
                    jTextArea1.append("The value Â£" + Long.parseLong(line[2]) + " is higher than the maximum Â£" + l.getMaxValue() + " allowed\n");
                } else {
                    if (l.getName().equalsIgnoreCase(location)) {
                        if (l.addItem(i)) { // If value is OK the item is added
                            jTextArea1.append(l.getItems());
                            jTextArea1.append("\nTotal location value: Â£" + Integer.toString(l.getValue()));
                        } else {
                            /**
                             * If value is below maxValue but location space is
                             * insufficient the user is alerted and items are
                             * re-assigned *
                             */
                            jTextArea1.append("Insufficient space in location " + location.toUpperCase() + "\n");

                            if (!addToAnyLocation(i, location, false)) {
                                moveItems(i, location);
                                jTextArea1.append(l.getItems());
                            }

                        }
                        viewItems();
                    }
                }
            }
        } catch (NumberFormatException e) {
            jTextArea1.append("Item reference must be a number");
            System.out.println("Item reference must be a number");
            //e.printStackTrace();
        }
    }

    public Location mostFreeSpace(String currentLocation) {
        int space = 0; // Sets free space to 0 before re-assigning
        Location temp = null;
        for (Location l : locations) {
            if (l.getFreeSpace() > space && !l.getName().equalsIgnoreCase(currentLocation)) {
                space = l.getFreeSpace(); // Assigns free space
                temp = l; // Temporary container for which location has most space
            }
        }
        return temp; // Location with most space is displayed
    }

    public void viewItems() {
        for (Location l : locations) { // All items in the locations Array are displayed
            jTextArea1.append(l.getItems());
        }
    }

    public boolean testData() {
        if (!loaded) {
            int reference = 30000; // Sets the base reference to 30000, test data is 10000s and 20000s
            Scanner scan = new Scanner(Location.class.getResourceAsStream("/Test.csv"));
            scan.nextLine(); // Skips over the first line which contains the header
            while (scan.hasNextLine()) {
                String[] line = scan.nextLine().split(","); // The comma is used as a splitter
                /**
                 * New item is added based on file data, with each passing the
                 * reference is incremented to avoid duplications*
                 */
                Item i = new Item(reference++, line[1], Long.parseLong(line[2]));
                if (!addToAnyLocation(i, null, false)) { // Items are distributed between locations as fit
                    moveItems(i, mostFreeSpace(null).getName());
                }
            }
            scan.close();
            loaded = true; // Items are now loaded, load no more
            return true;
        } else {
            return false;
        }
    }

    public Location getLocation(String name) {
        for (Location l : locations) { // Returns location by matching names
            if (l.getName().equalsIgnoreCase(name)) {
                return l;
            }
        }
        return null;
    }

    public boolean addToAnyLocation(Item i, String location, boolean move) {
        int space = 0; // Sets free space to 0 before re-assigning
        String loc = ""; // No location yet set
        for (Location l : locations) {
            /**
             * Checks free space and checks that the names are not the same,
             * would defeat the objective of adding to different location *
             */
            if (l.getFreeSpace() > space && !l.getName().equalsIgnoreCase(location)) {
                space = l.getFreeSpace();
                loc = l.getName();
            }
        }

        Location l = getLocation(loc);
        if (!move) {
            if (l.addItem(i)) { // Adds items to locations and displays confirmation
                jTextArea1.append("Item " + i.getReference() + ", " + i.getName() + ", added to location " + loc + "\n");
                return true;
            } else { // If unable to add to any location user is alerted
                jTextArea1.append("Unable to add item to any location\n");
                return false;
            }
        } else {
            if (l.addItem(i)) { // If items had to be moved the user is shown confirmation
                jTextArea1.append("Item " + i.getReference() + ", " + i.getName() + ", moved to location " + loc + "\n");
                getLocation(location).removeItem(i); // If items had to be moved then they are deleted from old location
                return true;
            } else {
                return false;
            }
        }
    }

    public boolean moveItems(Item i, String location) {
        Location l = getLocation(location); // Assigns location 
        ArrayList<Item> items = l.orderedList(); // Returns ordered list of Items 
        jTextArea1.append("\nItems moved for space:\n");
        for (Item item : items) { // Loops through all Items and assigns to different locations
            addToAnyLocation(item, location, true);
            if (l.getFreeSpace() > i.getValue()) { // If the value is less than the free space item is added
                jTextArea1.append(i.getReference() + " " + i.getName() + "\n");
                l.addItem(i);
                return true;
            }
        }
        return false;
    }

    public void displayContents() {
        for (Location l : locations) { // Displays all contents of locations array
            l.getItems();
        }
    }

    public void createPopulateLocations() { // Creates the locations and adds to Array, system now ready to use
        Location locationA = new Location("A");
        Location locationB = new Location("B");
        Location locationC = new Location("C");
        Location locationD = new Location("D");
        Location locationE = new Location("E");
        locations.addAll(Arrays.asList(locationA, locationB, locationC, locationD, locationE));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
